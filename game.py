# -*- coding: utf-8 -*-

from math import floor
from random import shuffle
from scheduler import Scheduler
import time

NB_CACHE = 3

global_speeds =     [20, 8, 6, 5, 4, 3, 2.5, 2]
global_speed_uses = [1 , 2, 2, 2, 3, 4, 4  , 10]


class Game:
    def __init__(self, nb_scenes):
        """ Define the initial state of the game.
        The player is on the middle of the scene 0 where nb_scenes scenes are created.
        To allow the possibility of multiple walls on a screen NB_CACHE walls are generated by advance.
        """
        self.nb_scenes = nb_scenes
        self.scenes = [[False] * nb_scenes] * NB_CACHE
        self.player_position = 0.5
        self.speeds = global_speeds[::]
        self.speed_uses = global_speed_uses[::]
        self.start_time = 0
        self.stop_time = 0
        self.scheduler = Scheduler(self)

        

    # ----------- Maze functions -----------

    def create_walls(self, filling_ratio):
        """ Create a new layer of wall in the scene cache.
        The parameter filling_ratio will decide the number of walls generated
        with a minimum of 1 wall and maximum of nb_scenes-1.
        """
        # Get the number of walls
        nb_walls = floor(filling_ratio * self.nb_scenes)
        if nb_walls >= self.nb_scenes:
            nb_walls = self.nb_scenes - 1
        elif nb_walls <= 0:
            nb_walls = 1

        # Generate the list
        new_walls = [True] * nb_walls + [False] * (self.nb_scenes - nb_walls)
        shuffle(new_walls)

        # Add the new walls
        self.scenes += [new_walls]

    # ----------- Player functions -----------

    def player_relative_move(self, degree):
        """ Increment the player position ragarding the rotation angle applied.
        """
        self.player_position += degree * self.nb_scenes / 360
        self.player_position %= self.nb_scenes

    def player_absolute_move(self, degree):
        """ Place the player on the absolute position.
        0Â° == middle of the scene 0.
        """
        self.player_position = (0.5 + degree * self.nb_scenes / 360) % self.nb_scenes

    def collide(self):
        """ Test if the player is on a scene where a wall if present.
        """
        return self.scenes[0][floor(self.player_position)]

    # ------------ Time functions ------------

    def start(self):
        """ Start the game scheduler
        """
        self.scheduler.start()
        self.start_time = time.time()
        self.on_time()

    def stop(self):
        """ Stop the game and save the current time
        """
        self.stop_time = time.time()
        self.scheduler.stop()
        self.scheduler.join()

    def on_time(self):
        """ Function that verify if there are no collisions with walls and schedule the next walls
        """
        if self.collide():
            self.stop_game()


